load("@rules_go//go:def.bzl", "go_binary", "go_cross_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_image_index", "oci_load")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

ARCHS = [
    "amd64",
    "arm64",
]

go_binary(
    name = "hello_world",
    embed = [":hello_world_lib"],
    visibility = ["//visibility:public"],
)

[
    go_cross_binary(
        name = "hello_world_" + os + "_" + arch,
        platform = "@rules_go//go/toolchain:" + os + "_" + arch,
        target = ":hello_world",
    )
    for os in [
        "linux",
        "windows",
        "darwin",
    ]
    for arch in ARCHS
]

go_library(
    name = "hello_world_lib",
    srcs = [
        "main.go",
        "os_darwin.go",
        "os_linux.go",
        "os_windows.go",
    ],
    importpath = "github.com/pddg/go-bazel-playground/apps/hello_world",
    visibility = ["//visibility:private"],
    deps = [
        "//internal/reverse",
        "@com_github_google_uuid//:uuid",
    ] + select({
        "@rules_go//go/platform:windows": [
            "//internal/windows",
        ],
        "//conditions:default": [],
    }),
)

[
    pkg_tar(
        name = "pkg_" + arch,
        srcs = [":hello_world_linux_" + arch],
    )
    for arch in ARCHS
]

[
    oci_image(
        name = "image_" + arch,
        # Specifying variant 'v8' is needed for arm64
        base = "@distroless_static_debian12_linux_" + arch + ("_v8" if arch == "arm64" else ""),
        entrypoint = ["/hello_world_linux_" + arch],
        tars = [":pkg_" + arch],
    )
    for arch in ARCHS
]

oci_image_index(
    name = "image",
    images = [":image_" + arch for arch in ARCHS],
)

oci_load(
    name = "image_load",
    image = select({
        "@platforms//cpu:x86_64": ":image_amd64",
        "@platforms//cpu:arm64": ":image_arm64",
    }),
    repo_tags = ["hello_world:latest"],
)
